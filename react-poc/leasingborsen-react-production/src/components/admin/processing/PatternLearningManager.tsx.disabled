import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Switch } from '@/components/ui/switch'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { 
  Brain, 
  Plus, 
  Edit,
  Trash2,
  Play,
  Pause,
  RotateCcw,
  TestTube,
  CheckCircle,
  XCircle,
  AlertTriangle,
  TrendingUp,
  Settings
} from 'lucide-react'
import { supabase } from '@/lib/supabase'

interface Pattern {
  id: string
  pattern: string
  field: string
  success_rate: number
  usage_count: number
  confidence_threshold: number
  examples: string[]
  status: 'active' | 'testing' | 'retired'
  created_at: string
  updated_at: string
}

interface ABTest {
  id: string
  test_name: string
  field: string
  original_pattern?: string
  new_pattern: string
  test_size: number
  original_success_rate?: number
  new_success_rate?: number
  improvement?: number
  recommendation: 'adopt' | 'reject' | 'needs_more_data'
  status: 'running' | 'completed' | 'cancelled'
  started_at: string
  completed_at?: string
}

export const PatternLearningManager: React.FC = () => {
  const [patterns, setPatterns] = useState<Pattern[]>([])
  const [abTests, setABTests] = useState<ABTest[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [selectedPattern, setSelectedPattern] = useState<Pattern | null>(null)
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [isTestDialogOpen, setIsTestDialogOpen] = useState(false)
  
  // Form states
  const [newPattern, setNewPattern] = useState({
    pattern: '',
    field: '',
    confidence_threshold: 0.7,
    examples: [''],
    status: 'testing' as const
  })
  
  const [testConfig, setTestConfig] = useState({
    field: '',
    new_pattern: '',
    test_size: 100,
    test_name: ''
  })

  useEffect(() => {
    loadData()
  }, [])

  const loadData = async () => {
    try {
      setLoading(true)
      setError(null)

      // Load patterns
      const { data: patternsData, error: patternsError } = await supabase
        .from('pattern_learning')
        .select('*')
        .order('updated_at', { ascending: false })

      if (patternsError) throw patternsError

      // Load A/B tests
      const { data: testsData, error: testsError } = await supabase
        .from('pattern_ab_tests')
        .select('*')
        .order('started_at', { ascending: false })
        .limit(20)

      if (testsError) throw testsError

      setPatterns(patternsData || [])
      setABTests(testsData || [])
    } catch (err) {
      console.error('Error loading pattern data:', err)
      setError('Der opstod en fejl ved indlæsning af mønsterdata')
    } finally {
      setLoading(false)
    }
  }

  const handleCreatePattern = async () => {
    try {
      const { error } = await supabase
        .from('pattern_learning')
        .insert({
          pattern: newPattern.pattern,
          field: newPattern.field,
          confidence_threshold: newPattern.confidence_threshold,
          examples: newPattern.examples.filter(ex => ex.trim() !== ''),
          status: newPattern.status,
          success_rate: 0,
          usage_count: 0
        })

      if (error) throw error

      setNewPattern({
        pattern: '',
        field: '',
        confidence_threshold: 0.7,
        examples: [''],
        status: 'testing'
      })
      setIsCreateDialogOpen(false)
      await loadData()
    } catch (err) {
      console.error('Error creating pattern:', err)
      setError('Der opstod en fejl ved oprettelse af mønster')
    }
  }

  const handleUpdatePatternStatus = async (patternId: string, newStatus: 'active' | 'testing' | 'retired') => {
    try {
      const { error } = await supabase
        .from('pattern_learning')
        .update({ 
          status: newStatus,
          updated_at: new Date().toISOString()
        })
        .eq('id', patternId)

      if (error) throw error
      await loadData()
    } catch (err) {
      console.error('Error updating pattern status:', err)
      setError('Der opstod en fejl ved opdatering af mønster')
    }
  }

  const handleDeletePattern = async (patternId: string) => {
    if (!confirm('Er du sikker på at du vil slette dette mønster?')) return

    try {
      const { error } = await supabase
        .from('pattern_learning')
        .delete()
        .eq('id', patternId)

      if (error) throw error
      await loadData()
    } catch (err) {
      console.error('Error deleting pattern:', err)
      setError('Der opstod en fejl ved sletning af mønster')
    }
  }

  const handleStartABTest = async () => {
    try {
      const { error } = await supabase
        .from('pattern_ab_tests')
        .insert({
          test_name: testConfig.test_name,
          field: testConfig.field,
          new_pattern: testConfig.new_pattern,
          test_size: testConfig.test_size,
          status: 'running',
          recommendation: 'needs_more_data'
        })

      if (error) throw error

      setTestConfig({
        field: '',
        new_pattern: '',
        test_size: 100,
        test_name: ''
      })
      setIsTestDialogOpen(false)
      await loadData()
    } catch (err) {
      console.error('Error starting A/B test:', err)
      setError('Der opstod en fejl ved start af A/B test')
    }
  }

  const getStatusColor = (status: string): string => {
    switch (status) {
      case 'active': return 'default'
      case 'testing': return 'secondary'
      case 'retired': return 'destructive'
      default: return 'outline'
    }
  }

  const getSuccessRateColor = (rate: number): string => {
    if (rate >= 0.8) return 'text-green-600'
    if (rate >= 0.6) return 'text-yellow-600'
    return 'text-red-600'
  }

  const getRecommendationIcon = (recommendation: string) => {
    switch (recommendation) {
      case 'adopt': return <CheckCircle className="h-4 w-4 text-green-600" />
      case 'reject': return <XCircle className="h-4 w-4 text-red-600" />
      default: return <AlertTriangle className="h-4 w-4 text-yellow-600" />
    }
  }

  const addExampleField = () => {
    setNewPattern(prev => ({
      ...prev,
      examples: [...prev.examples, '']
    }))
  }

  const updateExample = (index: number, value: string) => {
    setNewPattern(prev => ({
      ...prev,
      examples: prev.examples.map((ex, i) => i === index ? value : ex)
    }))
  }

  const removeExample = (index: number) => {
    setNewPattern(prev => ({
      ...prev,
      examples: prev.examples.filter((_, i) => i !== index)
    }))
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-2">
          <Brain className="h-6 w-6" />
          <h2 className="text-2xl font-bold">Mønster Administration</h2>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="h-4 bg-muted rounded w-3/4 mb-2" />
                <div className="h-8 bg-muted rounded w-1/2" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Brain className="h-6 w-6" />
          <h2 className="text-2xl font-bold">Mønster Administration</h2>
        </div>
        <div className="flex gap-2">
          <Dialog open={isTestDialogOpen} onOpenChange={setIsTestDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="outline">
                <TestTube className="h-4 w-4 mr-2" />
                Start A/B Test
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>Start A/B Test</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="test-name">Test Navn</Label>
                    <Input
                      id="test-name"
                      value={testConfig.test_name}
                      onChange={(e) => setTestConfig(prev => ({ ...prev, test_name: e.target.value }))}
                      placeholder="f.eks. Pris ekstraktion forbedring"
                    />
                  </div>
                  <div>
                    <Label htmlFor="test-field">Felt</Label>
                    <Input
                      id="test-field"
                      value={testConfig.field}
                      onChange={(e) => setTestConfig(prev => ({ ...prev, field: e.target.value }))}
                      placeholder="f.eks. price, mileage"
                    />
                  </div>
                </div>
                <div>
                  <Label htmlFor="new-pattern">Nyt Mønster</Label>
                  <Textarea
                    id="new-pattern"
                    value={testConfig.new_pattern}
                    onChange={(e) => setTestConfig(prev => ({ ...prev, new_pattern: e.target.value }))}
                    placeholder="Regex mønster at teste"
                    rows={3}
                  />
                </div>
                <div>
                  <Label htmlFor="test-size">Test Størrelse</Label>
                  <Input
                    id="test-size"
                    type="number"
                    value={testConfig.test_size}
                    onChange={(e) => setTestConfig(prev => ({ ...prev, test_size: parseInt(e.target.value) }))}
                    min={10}
                    max={1000}
                  />
                </div>
                <div className="flex justify-end gap-2">
                  <Button variant="outline" onClick={() => setIsTestDialogOpen(false)}>
                    Annuller
                  </Button>
                  <Button onClick={handleStartABTest}>
                    Start Test
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
          
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Nyt Mønster
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>Opret Nyt Mønster</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="pattern">Regex Mønster</Label>
                    <Textarea
                      id="pattern"
                      value={newPattern.pattern}
                      onChange={(e) => setNewPattern(prev => ({ ...prev, pattern: e.target.value }))}
                      placeholder="f.eks. Pris:\\s*([0-9,.]+ kr)"
                      rows={3}
                    />
                  </div>
                  <div>
                    <Label htmlFor="field">Felt</Label>
                    <Input
                      id="field"
                      value={newPattern.field}
                      onChange={(e) => setNewPattern(prev => ({ ...prev, field: e.target.value }))}
                      placeholder="f.eks. price, mileage"
                    />
                  </div>
                </div>
                
                <div>
                  <Label htmlFor="confidence">Konfidans Tærskel</Label>
                  <Input
                    id="confidence"
                    type="number"
                    step="0.1"
                    min="0"
                    max="1"
                    value={newPattern.confidence_threshold}
                    onChange={(e) => setNewPattern(prev => ({ ...prev, confidence_threshold: parseFloat(e.target.value) }))}
                  />
                </div>
                
                <div>
                  <Label>Eksempler</Label>
                  {newPattern.examples.map((example, index) => (
                    <div key={index} className="flex gap-2 mt-2">
                      <Input
                        value={example}
                        onChange={(e) => updateExample(index, e.target.value)}
                        placeholder="Eksempel på ekstraheret værdi"
                      />
                      {newPattern.examples.length > 1 && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => removeExample(index)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  ))}
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={addExampleField}
                    className="mt-2"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Tilføj Eksempel
                  </Button>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Switch
                    id="status"
                    checked={newPattern.status === 'active'}
                    onCheckedChange={(checked) => 
                      setNewPattern(prev => ({ ...prev, status: checked ? 'active' : 'testing' }))
                    }
                  />
                  <Label htmlFor="status">
                    Start som aktiv (ellers test status)
                  </Label>
                </div>
                
                <div className="flex justify-end gap-2">
                  <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                    Annuller
                  </Button>
                  <Button onClick={handleCreatePattern}>
                    Opret Mønster
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Main Content */}
      <Tabs defaultValue="patterns" className="space-y-4">
        <TabsList>
          <TabsTrigger value="patterns">Mønstre ({patterns.length})</TabsTrigger>
          <TabsTrigger value="tests">A/B Tests ({abTests.length})</TabsTrigger>
        </TabsList>

        {/* Patterns Tab */}
        <TabsContent value="patterns" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {patterns.map((pattern) => (
              <Card key={pattern.id}>
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-sm">{pattern.field}</CardTitle>
                    <Badge variant={getStatusColor(pattern.status)}>
                      {pattern.status}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <code className="text-xs bg-muted p-2 rounded block break-all">
                      {pattern.pattern.length > 60 
                        ? pattern.pattern.substring(0, 60) + '...' 
                        : pattern.pattern
                      }
                    </code>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">Succesrate:</span>
                      <span className={`font-medium ${getSuccessRateColor(pattern.success_rate)}`}>
                        {(pattern.success_rate * 100).toFixed(1)}%
                      </span>
                    </div>
                    
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">Anvendelser:</span>
                      <span className="font-medium">{pattern.usage_count}</span>
                    </div>
                    
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">Konfidans:</span>
                      <span className="font-medium">{pattern.confidence_threshold}</span>
                    </div>
                  </div>
                  
                  <Progress value={pattern.success_rate * 100} className="h-2" />
                  
                  <div className="flex gap-1">
                    {pattern.status === 'active' ? (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleUpdatePatternStatus(pattern.id, 'testing')}
                      >
                        <Pause className="h-3 w-3" />
                      </Button>
                    ) : (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleUpdatePatternStatus(pattern.id, 'active')}
                      >
                        <Play className="h-3 w-3" />
                      </Button>
                    )}
                    
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleUpdatePatternStatus(pattern.id, 'retired')}
                    >
                      <RotateCcw className="h-3 w-3" />
                    </Button>
                    
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedPattern(pattern)}
                    >
                      <Edit className="h-3 w-3" />
                    </Button>
                    
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => handleDeletePattern(pattern.id)}
                    >
                      <Trash2 className="h-3 w-3" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* A/B Tests Tab */}
        <TabsContent value="tests" className="space-y-4">
          <div className="space-y-4">
            {abTests.map((test) => (
              <Card key={test.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>{test.test_name}</CardTitle>
                    <div className="flex items-center gap-2">
                      <Badge variant={test.status === 'completed' ? 'default' : 'secondary'}>
                        {test.status}
                      </Badge>
                      {getRecommendationIcon(test.recommendation)}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <span className="text-muted-foreground block">Felt:</span>
                      <span className="font-medium">{test.field}</span>
                    </div>
                    <div>
                      <span className="text-muted-foreground block">Test Størrelse:</span>
                      <span className="font-medium">{test.test_size}</span>
                    </div>
                    <div>
                      <span className="text-muted-foreground block">Ny Succesrate:</span>
                      <span className={`font-medium ${
                        test.new_success_rate 
                          ? getSuccessRateColor(test.new_success_rate) 
                          : 'text-muted-foreground'
                      }`}>
                        {test.new_success_rate 
                          ? `${(test.new_success_rate * 100).toFixed(1)}%`
                          : 'Pending'
                        }
                      </span>
                    </div>
                    <div>
                      <span className="text-muted-foreground block">Forbedring:</span>
                      <span className={`font-medium flex items-center gap-1 ${
                        test.improvement && test.improvement > 0 
                          ? 'text-green-600' 
                          : test.improvement && test.improvement < 0
                            ? 'text-red-600'
                            : 'text-muted-foreground'
                      }`}>
                        {test.improvement ? (
                          <>
                            <TrendingUp className="h-3 w-3" />
                            {test.improvement > 0 ? '+' : ''}
                            {(test.improvement * 100).toFixed(1)}%
                          </>
                        ) : (
                          'Pending'
                        )}
                      </span>
                    </div>
                  </div>
                  
                  <div>
                    <span className="text-muted-foreground text-sm block mb-1">Nyt Mønster:</span>
                    <code className="text-xs bg-muted p-2 rounded block break-all">
                      {test.new_pattern}
                    </code>
                  </div>
                  
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <span>Startet: {new Date(test.started_at).toLocaleDateString('da-DK')}</span>
                    {test.completed_at && (
                      <span>Afsluttet: {new Date(test.completed_at).toLocaleDateString('da-DK')}</span>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}