import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { 
  TrendingUp, 
  TrendingDown, 
  Brain, 
  Target, 
  AlertTriangle, 
  CheckCircle, 
  BarChart3,
  Activity,
  Lightbulb,
  RefreshCw
} from 'lucide-react'
import { supabase } from '@/lib/supabase'

interface PatternMetrics {
  totalPatterns: number
  activePatterns: number
  testingPatterns: number
  averageSuccessRate: number
  topPerformingPatterns: Array<{
    field: string
    pattern: string
    success_rate: number
    usage_count: number
  }>
  underperformingPatterns: Array<{
    field: string
    pattern: string
    success_rate: number
    usage_count: number
  }>
  recentFormatChanges: Array<{
    dealer_id: string
    field: string
    change_type: string
    detected_at: string
  }>
}

interface LearningSuggestion {
  suggestion_type: string
  field: string
  pattern: string
  confidence: number
  occurrence_count: number
  estimated_improvement: number
  priority: number
}

interface FieldPerformance {
  field: string
  total_patterns: number
  active_patterns: number
  testing_patterns: number
  retired_patterns: number
  avg_success_rate: number
  best_success_rate: number
  worst_success_rate: number
}

export const IntelligenceDashboard: React.FC = () => {
  const [metrics, setMetrics] = useState<PatternMetrics | null>(null)
  const [suggestions, setSuggestions] = useState<LearningSuggestion[]>([])
  const [fieldPerformance, setFieldPerformance] = useState<FieldPerformance[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [refreshing, setRefreshing] = useState(false)

  useEffect(() => {
    loadDashboardData()
  }, [])

  const loadDashboardData = async () => {
    try {
      setLoading(true)
      setError(null)

      // Load pattern metrics
      const { data: patternData, error: patternError } = await supabase
        .rpc('get_pattern_metrics')

      if (patternError) throw patternError

      // Load learning suggestions
      const { data: suggestionsData, error: suggestionsError } = await supabase
        .rpc('get_learning_suggestions', {
          min_confidence: 0.6,
          min_occurrences: 5
        })

      if (suggestionsError) throw suggestionsError

      // Load field performance
      const { data: fieldData, error: fieldError } = await supabase
        .from('field_performance_summary')
        .select('*')
        .order('avg_success_rate', { ascending: false })

      if (fieldError) throw fieldError

      setMetrics(patternData)
      setSuggestions(suggestionsData || [])
      setFieldPerformance(fieldData || [])
    } catch (err) {
      console.error('Error loading dashboard data:', err)
      setError('Der opstod en fejl ved indlæsning af dashboard data')
    } finally {
      setLoading(false)
    }
  }

  const refreshData = async () => {
    setRefreshing(true)
    await loadDashboardData()
    setRefreshing(false)
  }

  const handleAcceptSuggestion = async (suggestion: LearningSuggestion) => {
    try {
      // Promote pattern to testing status
      const { error } = await supabase
        .from('pattern_learning')
        .insert({
          pattern: suggestion.pattern,
          field: suggestion.field,
          success_rate: suggestion.confidence,
          confidence_threshold: 0.7,
          status: 'testing',
          examples: []
        })

      if (error) throw error

      // Mark discoveries as promoted
      await supabase
        .from('pattern_discoveries')
        .update({ promoted: true })
        .eq('pattern', suggestion.pattern)
        .eq('field', suggestion.field)

      // Refresh suggestions
      await refreshData()
    } catch (err) {
      console.error('Error accepting suggestion:', err)
    }
  }

  const handleRejectSuggestion = async (suggestion: LearningSuggestion) => {
    try {
      // Mark discoveries as rejected (promoted = true to remove from suggestions)
      await supabase
        .from('pattern_discoveries')
        .update({ promoted: true })
        .eq('pattern', suggestion.pattern)
        .eq('field', suggestion.field)

      // Refresh suggestions
      await refreshData()
    } catch (err) {
      console.error('Error rejecting suggestion:', err)
    }
  }

  const getPriorityColor = (priority: number): string => {
    switch (priority) {
      case 1: return 'destructive'
      case 2: return 'default' 
      case 3: return 'secondary'
      default: return 'outline'
    }
  }

  const getSuccessRateColor = (rate: number): string => {
    if (rate >= 0.8) return 'text-green-600'
    if (rate >= 0.6) return 'text-yellow-600'
    return 'text-red-600'
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-2">
          <Brain className="h-6 w-6" />
          <h2 className="text-2xl font-bold">Intelligence Dashboard</h2>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="h-4 bg-muted rounded w-3/4 mb-2" />
                <div className="h-8 bg-muted rounded w-1/2" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    )
  }

  if (!metrics) {
    return (
      <Alert>
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>Ingen data tilgængelig</AlertDescription>
      </Alert>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Brain className="h-6 w-6" />
          <h2 className="text-2xl font-bold">Intelligence Dashboard</h2>
        </div>
        <Button 
          onClick={refreshData} 
          disabled={refreshing}
          variant="outline"
          size="sm"
        >
          <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />
          Opdater
        </Button>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Mønstre</p>
                <p className="text-2xl font-bold">{metrics.totalPatterns}</p>
              </div>
              <Target className="h-8 w-8 text-blue-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Aktive Mønstre</p>
                <p className="text-2xl font-bold text-green-600">{metrics.activePatterns}</p>
              </div>
              <CheckCircle className="h-8 w-8 text-green-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Test Mønstre</p>
                <p className="text-2xl font-bold text-yellow-600">{metrics.testingPatterns}</p>
              </div>
              <Activity className="h-8 w-8 text-yellow-600" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Gns. Succesrate</p>
                <p className={`text-2xl font-bold ${getSuccessRateColor(metrics.averageSuccessRate)}`}>
                  {(metrics.averageSuccessRate * 100).toFixed(1)}%
                </p>
              </div>
              <BarChart3 className="h-8 w-8 text-purple-600" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content Tabs */}
      <Tabs defaultValue="suggestions" className="space-y-4">
        <TabsList>
          <TabsTrigger value="suggestions">Forslag ({suggestions.length})</TabsTrigger>
          <TabsTrigger value="performance">Ydelse</TabsTrigger>
          <TabsTrigger value="fields">Felt Analyse</TabsTrigger>
          <TabsTrigger value="changes">Format Ændringer</TabsTrigger>
        </TabsList>

        {/* Learning Suggestions */}
        <TabsContent value="suggestions" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lightbulb className="h-5 w-5" />
                Læringsforslag
              </CardTitle>
            </CardHeader>
            <CardContent>
              {suggestions.length === 0 ? (
                <p className="text-muted-foreground text-center py-8">
                  Ingen nye forslag tilgængelige
                </p>
              ) : (
                <div className="space-y-4">
                  {suggestions.map((suggestion, index) => (
                    <div key={index} className="border rounded-lg p-4 space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <Badge variant={getPriorityColor(suggestion.priority)}>
                            Prioritet {suggestion.priority}
                          </Badge>
                          <Badge variant="outline">{suggestion.field}</Badge>
                        </div>
                        <div className="flex gap-2">
                          <Button 
                            size="sm" 
                            onClick={() => handleAcceptSuggestion(suggestion)}
                          >
                            Accepter
                          </Button>
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => handleRejectSuggestion(suggestion)}
                          >
                            Afvis
                          </Button>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <div>
                          <span className="font-medium">Mønster:</span>
                          <code className="ml-2 px-2 py-1 bg-muted rounded text-sm">
                            {suggestion.pattern}
                          </code>
                        </div>
                        
                        <div className="grid grid-cols-3 gap-4 text-sm">
                          <div>
                            <span className="text-muted-foreground">Konfidans:</span>
                            <span className="ml-2 font-medium">
                              {(suggestion.confidence * 100).toFixed(1)}%
                            </span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Forekomster:</span>
                            <span className="ml-2 font-medium">{suggestion.occurrence_count}</span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Estimeret forbedring:</span>
                            <span className={`ml-2 font-medium ${
                              suggestion.estimated_improvement > 0 ? 'text-green-600' : 'text-red-600'
                            }`}>
                              {suggestion.estimated_improvement > 0 ? '+' : ''}
                              {(suggestion.estimated_improvement * 100).toFixed(1)}%
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Performance Analysis */}
        <TabsContent value="performance" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Top Performing Patterns */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="h-5 w-5 text-green-600" />
                  Bedste Mønstre
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {metrics.topPerformingPatterns.map((pattern, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-muted rounded-lg">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <Badge variant="outline">{pattern.field}</Badge>
                          <span className="text-sm text-muted-foreground">
                            #{index + 1}
                          </span>
                        </div>
                        <code className="text-xs bg-background px-2 py-1 rounded">
                          {pattern.pattern.length > 40 
                            ? pattern.pattern.substring(0, 40) + '...' 
                            : pattern.pattern
                          }
                        </code>
                      </div>
                      <div className="text-right">
                        <div className={`font-bold ${getSuccessRateColor(pattern.success_rate)}`}>
                          {(pattern.success_rate * 100).toFixed(1)}%
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {pattern.usage_count} anvendelser
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Underperforming Patterns */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingDown className="h-5 w-5 text-red-600" />
                  Dårlige Mønstre
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {metrics.underperformingPatterns.map((pattern, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-muted rounded-lg">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <Badge variant="destructive">{pattern.field}</Badge>
                          <span className="text-sm text-muted-foreground">
                            Behøver forbedring
                          </span>
                        </div>
                        <code className="text-xs bg-background px-2 py-1 rounded">
                          {pattern.pattern.length > 40 
                            ? pattern.pattern.substring(0, 40) + '...' 
                            : pattern.pattern
                          }
                        </code>
                      </div>
                      <div className="text-right">
                        <div className={`font-bold ${getSuccessRateColor(pattern.success_rate)}`}>
                          {(pattern.success_rate * 100).toFixed(1)}%
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {pattern.usage_count} anvendelser
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Field Analysis */}
        <TabsContent value="fields" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Felt Ydelse Analyse</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {fieldPerformance.map((field, index) => (
                  <div key={index} className="space-y-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <h4 className="font-medium">{field.field}</h4>
                        <Badge variant="outline">
                          {field.total_patterns} mønstre
                        </Badge>
                      </div>
                      <div className={`font-bold ${getSuccessRateColor(field.avg_success_rate)}`}>
                        {(field.avg_success_rate * 100).toFixed(1)}% gns.
                      </div>
                    </div>
                    
                    <Progress 
                      value={field.avg_success_rate * 100} 
                      className="h-2"
                    />
                    
                    <div className="grid grid-cols-4 gap-4 text-sm text-muted-foreground">
                      <div>Aktive: {field.active_patterns}</div>
                      <div>Test: {field.testing_patterns}</div>
                      <div>Pensioneret: {field.retired_patterns}</div>
                      <div>Bedste: {(field.best_success_rate * 100).toFixed(1)}%</div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Format Changes */}
        <TabsContent value="changes" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertTriangle className="h-5 w-5 text-orange-600" />
                Nylige Format Ændringer
              </CardTitle>
            </CardHeader>
            <CardContent>
              {metrics.recentFormatChanges.length === 0 ? (
                <p className="text-muted-foreground text-center py-8">
                  Ingen nylige format ændringer registreret
                </p>
              ) : (
                <div className="space-y-3">
                  {metrics.recentFormatChanges.map((change, index) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="space-y-1">
                        <div className="flex items-center gap-2">
                          <Badge variant="outline">{change.field}</Badge>
                          <Badge variant={change.change_type === 'missing_field' ? 'destructive' : 'default'}>
                            {change.change_type}
                          </Badge>
                        </div>
                        <p className="text-sm text-muted-foreground">
                          Dealer: {change.dealer_id}
                        </p>
                      </div>
                      <div className="text-right text-sm text-muted-foreground">
                        {new Date(change.detected_at).toLocaleDateString('da-DK')}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}